// Code generated by ent, DO NOT EDIT.

package employee

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldSalary holds the string denoting the salary field in the database.
	FieldSalary = "salary"
	// Table holds the table name of the employee in the database.
	Table = "employees"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPosition,
	FieldSalary,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// BySalary orders the results by the salary field.
func BySalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalary, opts...).ToFunc()
}
